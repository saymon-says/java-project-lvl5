plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'org.liquibase.gradle' version '2.1.0'
	id 'com.adarshr.test-logger' version '3.0.0'
    id 'org.siouan.frontend-jdk11' version '6.0.0'
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

compileJava {
    options.release = 16
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'hexlet.code.app.AppApplication'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.owasp.encoder:encoder:1.2.3'
    compileOnly 'org.projectlombok:lombok:1.18.22'

    annotationProcessor(
            'org.projectlombok:lombok:1.18.22',
            'com.querydsl:querydsl-apt:5.0.0:jpa',
            'javax.annotation:javax.annotation-api:1.3.2',
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
    )

    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-security',
            'io.jsonwebtoken:jjwt-api:0.11.2',
            'org.springdoc:springdoc-openapi-ui:1.5.12',
            'org.liquibase:liquibase-core:4.6.2',
            'com.querydsl:querydsl-core:5.0.0',
            'com.querydsl:querydsl-jpa:5.0.0',
    )

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core:4.6.2',
            'org.liquibase.ext:liquibase-hibernate5:4.6.2',
            'org.springframework.boot:spring-boot-starter-data-jpa',
    )

    runtimeOnly(
            'com.h2database:h2:1.4.200',
            'io.jsonwebtoken:jjwt-impl:0.11.2',
            'io.jsonwebtoken:jjwt-jackson:0.11.2',
            'org.postgresql:postgresql:42.2.24'
    )

    testImplementation(
			'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.security:spring-security-test:5.5.1',
            'org.springframework.boot:spring-boot-starter-test',
            'com.tobedevoured.modelcitizen:spring:0.8.3',
            'com.github.database-rider:rider-junit5:1.32.0'

    )
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
diffChangeLog {
    dependsOn compileJava
}

wrapper {
    gradleVersion = '7.3'
    distributionType = Wrapper.DistributionType.ALL
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url 'jdbc:h2:./taskManager'
            username 'sa'
            password 'sa'
            referenceUrl 'hibernate:spring:hexlet.code.app.model.' +
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

openApi {
    apiDocsUrl.set("http://localhost:5000/v3/api-docs")
}

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

checkstyle {
    toolVersion '9.0'
}

frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend